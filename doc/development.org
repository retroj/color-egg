
* TODO remove encodings
  :LOGBOOK:
  - State -> "TODO"  [2014-12-15 Mon]
  :END:

It has become clear that encodings as currently implemented are not a good
way to go with the color egg.  They added a great deal of complexity for
basically no benefit.  The purpose of encodings was to allow color-arrays
to directly address into pixel buffers, however, I am hard pressed to come
up with very many actual cases where non-normalized color values are
desirable when manipulating colors.  The amount of type checking needed at
every step, alternative versions of procedures for different encodings,
and constant conversion to and from normalized form all indicate a library
spiraling out of control in its complexity and indicate that encodings
were a bad idea.

Instead we should focus on an encoding system where encodings are used to
get data into and out of the color egg.

Internally, I think it makes most sense to store color data in a float
type srfi-4 vector, rather than a scheme vector like we used to use.  By
using a srfi-4 vector, we still provide the possibility of optimized
manipulation by foreign code when needed.

* TODO grayscale-colorspace
  :LOGBOOK:  
  - State -> "TODO"  [2014-12-09 Tue]
  :END:      

grayscale-colorspace has only one channel, v.

TEST: if you have a grayscale color, conversion to hsv can infer that h
      and s are zero without the need for a special conversion procedure.

* TODO efficient color-array design
  :LOGBOOK:  
  - State -> "TODO"  [2014-12-09 Tue]
  :END:      

The current design of color-array is inefficient for things like getting,
setting, and copying color values.  This is because every time we do any
of these things, we need to look up the colorspace and encoding.

What advantages could be gained by always storing color values in
byte-blobs, instead of allowing any encoding whatsoever?

 - Copying values from one color-array to another color or color-array
   could be done with memcpy if they had the same encoding.

Could encoding lookups be reduced by having procedures which returned
encoding-specific closures?  A caller that needed to do a large amount of
color work could then get a closure that captured the encoding accessors
or setters that they needed, and not have to do a lookup for each pixel.
